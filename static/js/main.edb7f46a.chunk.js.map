{"version":3,"sources":["DateForm.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["DateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","month","day","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","preventDefault","_this$state","getDate","react_default","a","createElement","className","onSubmit","htmlFor","onChange","type","id","placeholder","Component","Calendar","fact","getFact","newMonth","newDay","_this2","_this3","axios","get","concat","then","res","data","_this4","_this$props","src_DateForm_0","defaultProps","App","src_Calendar_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edb7f46a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './DateForm.css';\n\nclass DateForm extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      month: '',\n      day: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  } \n\n  handleSubmit(event){\n    event.preventDefault();\n    let {month, day} = this.state;\n    this.props.getDate(month, day);\n  }\n\n  render() {\n    return (\n      <form className=\"DateForm\" onSubmit={this.handleSubmit}>\n\n\n\n        <div className=\"DateForm-date\">\n          <div className=\"DateForm-month\">\n            <label htmlFor=\"month\">Month</label>\n            <input  \n              value={this.state.month} \n              onChange={this.handleChange} \n              type=\"text\" \n              name=\"month\"\n              id=\"month\"\n              placeholder=\"MM\"\n            />\n          </div>\n          <div className=\"DateForm-day\">\n            <label htmlFor=\"day\">Day</label>\n            <input  \n              value={this.state.day} \n              onChange={this.handleChange} \n              type=\"text\" \n              name=\"day\"\n              id=\"day\"\n              placeholder=\"DD\"\n            />\n          </div>\n          \n        </div>\n        <button type=\"submit\">Submit</button>\n        \n         \n        \n        \n        \n      </form>\n    )\n  }\n}\n\nexport default DateForm;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DateForm from './DateForm';\nimport './Calendar.css';\n\nclass Calendar extends Component {\n  static defaultProps = {\n    month: 1,\n    day: 1\n  }\n  constructor(props){\n    super(props);\n    this.state = {\n      month: '',\n      day: '',\n      fact: ''\n    }\n    this.getDate = this.getDate.bind(this);\n    this.getFact = this.getFact.bind(this);\n  }\n\n  getDate(newMonth, newDay){\n    this.setState({\n      month: newMonth,\n      day: newDay\n    }, () => this.getFact())\n  }\n\n  getFact(){\n    let {day, month} = this.state;\n    axios.get(`http://numbersapi.com/${month}/${day}/date`)\n      .then(res => this.setState({\n        fact: res.data\n      }))\n  }\n\n  componentDidMount(){\n    let {day, month} = this.props;\n    axios.get(`http://numbersapi.com/${month}/${day}/date`)\n    .then(res => this.setState({\n      fact: res.data\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"Calendar\">\n        <h1>Pick a date, any date...</h1>\n        <span>(and learn a new fun fact!)</span>\n        <div className=\"Calendar-spiral\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        <div className=\"Calendar-page\">\n          <DateForm getDate={this.getDate} />\n          <div className=\"Calendar-factContainer\">\n            <p className=\"Calendar-fact\">{this.state.fact}</p>\n          </div>\n          \n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Calendar;\n\n\n\n","import React from 'react';\nimport Calendar from './Calendar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}